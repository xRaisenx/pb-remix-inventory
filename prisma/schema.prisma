generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model AnalyticsData {
  id            String   @id
  productId     String
  date          DateTime
  unitsSold     Int?
  revenue       Float?
  orders        Int?
  salesVelocity Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([productId])
}

model DemandForecast {
  id              String   @id
  productId       String
  predictedDemand Float
  periodDays      Int
  confidenceScore Float
  createdAt       DateTime @default(now())
  Product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Inventory {
  id                String    @id
  quantity          Int
  warehouseId       String
  productId         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  availableQuantity Int?
  Product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  Warehouse         Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([productId, warehouseId])
}

model NotificationLog {
  id           String              @id
  shopId       String
  channel      NotificationChannel
  recipient    String?
  message      String
  status       NotificationStatus
  productId    String?
  productTitle String?
  alertType    String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  errorMessage String?
  subject      String?
  alertId      String?
  retryCount   Int?
  sentAt       DateTime?
  deliveredAt  DateTime?
  metadata     Json?
  Shop         Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

model NotificationSetting {
  id                          String   @id
  shopId                      String
  email                       Boolean  @default(false)
  slack                       Boolean  @default(false)
  telegram                    Boolean  @default(false)
  mobilePush                  Boolean  @default(false)
  emailAddress                String?
  slackWebhookUrl             String?
  telegramBotToken            String?
  telegramChatId              String?
  frequency                   String   @default("daily")
  lowStockThreshold           Int?
  salesVelocityThreshold      Float?
  criticalStockThresholdUnits Int?
  criticalStockoutDays        Int?
  syncEnabled                 Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  Shop                        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Product {
  id                     String           @id
  shopifyId              String           @unique
  title                  String
  vendor                 String
  productType            String?
  status                 ProductStatus?   @default(Unknown)
  trending               Boolean?         @default(false)
  salesVelocityFloat     Float?
  stockoutDays           Float?
  lastRestockedDate      DateTime?
  category               String?
  tags                   String[]
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  shopId                 String
  handle                 String?
  quantity               Int?             @default(0)
  shopifyInventoryItemId String?
  price                  Decimal?         @default(0) @db.Decimal(10, 2)
  sku                    String?
  imageUrl               String?
  description            String?
  weight                 Float?
  dimensions             String?
  lastUpdated            DateTime?        @default(now())
  lastUpdatedBy          String?
  AnalyticsData          AnalyticsData[]
  DemandForecast         DemandForecast[]
  Inventory              Inventory[]
  Shop                   Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  ProductAlert           ProductAlert[]
  Variant                Variant[]

  @@index([shopId])
  @@index([status])
  @@index([salesVelocityFloat])
  @@index([trending])
}

model Session {
  id          String    @id
  shopId      String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      BigInt?
  Shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@index([expires])
  @@index([isOnline])
  @@index([shopId], map: "Session_shop_idx")
  @@index([state])
}

model Shop {
  id                         String                @id
  shop                       String                @unique
  emailForNotifications      String?
  slackWebhookUrl            String?
  telegramBotToken           String?
  telegramChatId             String?
  whatsAppApiCredentialsJson String?
  lowStockThreshold          Int?                  @default(10)
  initialSyncCompleted       Boolean               @default(false)
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  criticalStockThreshold     Int?                  @default(5)
  highDemandThreshold        Float?                @default(50.0)
  NotificationLog            NotificationLog[]
  NotificationSetting        NotificationSetting[]
  Product                    Product[]
  Session                    Session[]
  Warehouse                  Warehouse[]
}

model Variant {
  id                String   @id
  shopifyId         String   @unique
  title             String?
  sku               String?
  price             Decimal?
  inventoryQuantity Int?
  inventoryItemId   String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  productId         String
  Product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sku])
  @@index([productId])
}

model Warehouse {
  id                 String      @id
  name               String
  location           String
  shopifyLocationGid String?     @unique
  shopId             String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  Inventory          Inventory[]
  Shop               Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, name])
}

model ProductAlert {
  id        String   @id
  productId String
  type      String
  message   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([productId])
}

enum NotificationChannel {
  Email
  Slack
  Telegram
  MobilePush
  System
  SMS
  Webhook
}

enum NotificationStatus {
  Sent
  Delivered
  Failed
  Error
  Simulated
  FailedConfiguration
  Pending
}

enum ProductStatus {
  Unknown
  OK
  Low
  Critical
  OutOfStock
}

enum AlertSeverity {
  Info
  Warning
  Critical
}

enum AlertType {
  LowStock
  OutOfStock
  SalesSpike
  SalesDrop
  NewProduct
  Restock
}

enum TrendDirection {
  Up
  Down
  Stable
}
