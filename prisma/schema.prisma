// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id          String    @id
  shop        String // Changed from shopId to shop to match Shopify session structure
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      BigInt?

  @@index([shop]) // Index on shop domain
}

model Shop {
  id                          String                  @id @default(cuid()) // Use cuid for Shop ID
  shop                        String                  @unique // Shopify shop domain
  accessToken                 String? // Made optional as online sessions might not have it
  emailForNotifications       String?
  slackWebhookUrl             String?
  telegramBotToken            String?
  telegramChatId              String?
  whatsAppApiCredentialsJson  String?
  lowStockThreshold           Int?                    @default(10) // Default low stock threshold
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  products                    Product[]
  NotificationSettings        NotificationSetting[]
  warehouses                  Warehouse[] // Link shops to warehouses
  notificationLogs            NotificationLog[] // Relation to NotificationLog
}

model NotificationSetting {
  id        String   @id @default(cuid())
  channel   String   // e.g., 'email', 'slack'
  enabled   Boolean
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
  // Channel-specific settings moved here from Shop model
  emailAddress String?
  slackWebhookUrl String?
  telegramBotToken String?
  telegramChatId String?
  // Thresholds moved here from Shop model
  frequency String @default("daily") // Also ensuring quotes are standard double quotes
  lowStockThreshold Int?
  salesVelocityThreshold Float?
  criticalStockThresholdUnits Int?
  criticalStockoutDays Int?
  syncEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([shopId, channel]) // Ensure only one setting per channel per shop
}

model Product {
  id                 String     @id @default(cuid())
  shopifyId          String     @unique
  title              String
  vendor             String
  productType        String?
  status             String     @default("Unknown") // Added status, default to Unknown
  trending           Boolean    @default(false)   // Added trending
  salesVelocityFloat Float?                       // Added sales velocity
  stockoutDays       Float?                       // Added stockout days (can be fractional)
  lastRestockedDate  DateTime?                    // Added last restocked date
  category           String?                      // Added category
  tags               String[]   @default([]) // Default to empty array
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  shopId             String
  shop               Shop       @relation(fields: [shopId], references: [id])
  variants           Variant[]
  inventory          Inventory[]
  DemandForecasts    DemandForecast[] // Relation to DemandForecast

  @@index([shopId])
  @@index([status]) // Index for querying by status
  @@index([trending]) // Index for querying by trending
}

model Variant {
  id                String      @id @default(cuid())
  shopifyId         String      @unique
  title             String? // Variant title can be null
  sku               String?
  price             Decimal
  inventoryQuantity Int // Total quantity across all locations for this variant
  inventoryItemId   String? // Shopify's inventory_item_id
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  productId         String
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, shopifyId]) // Unique constraint on product and shopify variant ID
  @@index([productId])
  @@index([shopifyId]) // Index on shopifyId for faster lookups
}

model Inventory {
  id         String   @id @default(cuid())
  quantity   Int
  warehouse  Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  product    Product   @relation(fields: [productId], references: [id]) // Inventory links Product to Warehouse
  productId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([productId, warehouseId]) // Ensure only one inventory record per product per warehouse
  @@index([productId])
  @@index([warehouseId])
}

model Warehouse {
  id                 String      @id @default(cuid())
  name               String
  location           String // Physical location address
  shopifyLocationGid String?     @unique // Link to Shopify Location GID, can be null
  shopId             String
  shop               Shop        @relation(fields: [shopId], references: [id])
  inventories        Inventory[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@unique([shopId, name]) // Ensure unique name per shop
  @@index([shopId])
}

model DemandForecast {
    id              String    @id @default(cuid())
    productId       String
    product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    predictedDemand Float
    periodDays      Int
    confidenceScore Float
    createdAt       DateTime  @default(now())

    @@index([productId])
}

model NotificationLog {
    id          String    @id @default(cuid())
    shopId      String
    shop        Shop      @relation(fields: [shopId], references: [id])
    channel     String // e.g., 'Email', 'Slack'
    recipient   String? // e.g., email address, webhook URL, chat ID
    message     String
    status      String // e.g., 'Sent', 'Failed', 'Simulated'
    productId   String? // Optional: link to product if alert is product-specific
    productTitle String? // Optional: product title for context
    alertType   String? // Optional: e.g., 'low_stock', 'high_trend'
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([shopId])
    @@index([createdAt]) // Index for sorting history
}
