generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// Tracks sales and performance data for a specific product variant.
model AnalyticsData {
  id            String   @id
  variantId     String
  date          DateTime
  unitsSold     Int?
  revenue       Float?
  orders        Int?
  salesVelocity Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Variant       Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([variantId])
}

// Stores demand predictions for a specific product variant.
model DemandForecast {
  id              String   @id
  variantId       String
  predictedDemand Float
  periodDays      Int
  confidenceScore Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt // FIX: Added for consistency
  Variant         Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
}

// Manages inventory stock for a specific variant in a specific warehouse.
model Inventory {
  id                String    @id
  quantity          Int
  warehouseId       String
  variantId         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  availableQuantity Int?
  Variant           Variant   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  Warehouse         Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([variantId, warehouseId])
}

model NotificationLog {
  id           String              @id
  shopId       String
  channel      NotificationChannel
  recipient    String?
  message      String
  status       NotificationStatus
  variantId    String?
  productTitle String?
  alertType    String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  errorMessage String?
  subject      String?
  Shop         Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)
  alertId      String?
  retryCount   Int?
  sentAt       DateTime?
  deliveredAt  DateTime?
  metadata     Json?

  @@index([shopId])
}

// Manages notification settings for a shop. Each shop has exactly one.
model NotificationSetting {
  id                          String   @id
  shopId                      String   @unique // FIX: Ensures one-to-one relation with Shop
  email                       Boolean  @default(false)
  slack                       Boolean  @default(false)
  telegram                    Boolean  @default(false)
  mobilePush                  Boolean  @default(false)
  emailAddress                String?
  slackWebhookUrl             String?
  telegramBotToken            String?
  telegramChatId              String?
  frequency                   String   @default("daily")
  lowStockThreshold           Int?
  salesVelocityThreshold      Float?
  criticalStockThresholdUnits Int?
  criticalStockoutDays        Int?
  syncEnabled                 Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  Shop                        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Product {
  id                 String    @id
  shopifyId          String    @unique
  title              String
  vendor             String
  productType        String?
  handle             String?
  description        String?
  imageUrl           String?
  tags               String[]
  shopId             String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastUpdatedBy      String?
  status             ProductStatus? @default(Unknown)
  trending           Boolean?  @default(false)
  salesVelocityFloat Float?
  stockoutDays       Float?
  lastRestockedDate  DateTime?
  category           String?
  Shop               Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  Variant            Variant[]

  @@index([shopId])
  @@index([status])
}

// Alerts specific to a product variant (e.g., low stock).
model VariantAlert {
  id        String   @id
  variantId String
  type      String
  message   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([variantId])
}

model Session {
  id          String    @id
  shopId      String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      BigInt?
  createdAt   DateTime  @default(now()) // FIX: Added for consistency
  updatedAt   DateTime  @updatedAt      // FIX: Added for consistency
  Shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

model Shop {
  id                         String                 @id
  shop                       String                 @unique
  emailForNotifications      String?
  slackWebhookUrl            String?
  telegramBotToken           String?
  telegramChatId             String?
  whatsAppApiCredentialsJson String?
  lowStockThreshold          Int?                   @default(10)
  initialSyncCompleted       Boolean                @default(false)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  criticalStockThreshold     Int?                   @default(5)
  highDemandThreshold        Float?                 @default(50.0)
  NotificationLog            NotificationLog[]
  NotificationSetting        NotificationSetting?   // FIX: Changed to a one-to-one relation
  Product                    Product[]
  Warehouse                  Warehouse[]
  Session                    Session[]
}

model Variant {
  id              String           @id
  shopifyId       String           @unique
  productId       String
  title           String?
  sku             String?
  price           Decimal          @db.Decimal(10, 2)
  inventoryItemId String?          @unique
  weight          Float?
  dimensions      String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  AnalyticsData   AnalyticsData[]
  DemandForecast  DemandForecast[]
  Inventory       Inventory[]
  VariantAlert    VariantAlert[]

  @@unique([productId, sku])
  @@index([productId])
}

model Warehouse {
  id                 String      @id
  name               String
  location           String
  shopifyLocationGid String?     @unique
  shopId             String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  Shop               Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  Inventory          Inventory[]

  @@unique([shopId, name])
}

enum NotificationChannel {
  Email
  Slack
  Telegram
  MobilePush
  System
  SMS
  Webhook
}

enum NotificationStatus {
  Sent
  Delivered
  Failed
  Error
  Simulated
  FailedConfiguration
  Pending
}

enum ProductStatus {
  Unknown
  OK
  Low
  Critical
  OutOfStock
}