generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Shop {
  id                         String      @id @default(uuid())
  shop                       String      @unique
  accessToken                String
  emailForNotifications      String?
  slackWebhookUrl            String?
  telegramBotToken           String?
  telegramChatId             String?
  whatsAppApiCredentialsJson String?
  lowStockThreshold          Int?        @default(10)
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  products                   Product[]
  sessions                   Session[]
  warehouses                 Warehouse[]
}

model Session {
  id          String    @id
  shopId      String
  state       String
  accessToken String
  scope       String?
  expires     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Product {
  id          String      @id @default(uuid())
  shopId      String
  shopifyId   String      @unique
  title       String
  vendor      String
  productType String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  inventory   Inventory[]
  shop        Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  variants    Variant[]
}

model Warehouse {
  id                 String      @id @default(uuid())
  name               String
  location           String
  shopifyLocationGid String      @unique
  shopId             String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  inventory          Inventory[]
  shop               Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, name])
}

model Inventory {
  id          String    @id @default(uuid())
  productId   String
  warehouseId String
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([productId, warehouseId])
}

model Variant {
  id                String   @id @default(uuid())
  productId         String
  shopifyId         String
  sku               String?
  price             Decimal
  inventoryQuantity Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sku])
}
