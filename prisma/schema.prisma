datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id          String    @id
  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      BigInt?

  // PrismaSessionStorage does not require a relation to Shop
  @@index([shop])
}

model Shop {
  id                          String                  @id @default(cuid())
  shop                        String                  @unique
  emailForNotifications       String?
  slackWebhookUrl             String?
  telegramBotToken            String?
  telegramChatId              String?
  whatsAppApiCredentialsJson  String?
  lowStockThreshold           Int?                    @default(10)
  initialSyncCompleted Boolean @default(false) // ADD THIS LINE
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt

  products             Product[]
  NotificationSettings NotificationSetting[]
  warehouses           Warehouse[]
  notificationLogs     NotificationLog[]
}

model NotificationSetting {
  id                          String    @id @default(cuid())
  shopId                      String    @unique // A shop should only have one settings object
  shop                        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  email                       Boolean   @default(false)
  slack                       Boolean   @default(false)
  telegram                    Boolean   @default(false)
  mobilePush                  Boolean   @default(false)
  emailAddress                String?
  slackWebhookUrl             String?
  telegramBotToken            String?
  telegramChatId              String?
  frequency                   String    @default("daily")
  lowStockThreshold           Int?
  salesVelocityThreshold      Float?
  criticalStockThresholdUnits Int?
  criticalStockoutDays        Int?
  syncEnabled                 Boolean   @default(false)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model Product {
  id                 String           @id @default(cuid())
  shopifyId          String           @unique
  title              String
  vendor             String
  productType        String?
  status             String?          @default("Unknown")
  trending           Boolean?         @default(false)
  salesVelocityFloat Float?
  stockoutDays       Float?
  lastRestockedDate  DateTime?
  category           String?
  tags               String[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  shopId             String
  shop               Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  variants           Variant[]
  inventory          Inventory[]
  DemandForecasts    DemandForecast[]

  @@index([shopId])
}

model Variant {
  id                  String    @id @default(cuid())
  shopifyId           String    @unique
  title               String?
  sku                 String?
  price               Decimal?
  inventoryQuantity   Int?
  inventoryItemId     String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  productId           String
  product             Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sku])
  @@index([productId])
}

model Inventory {
  id          String    @id @default(cuid())
  quantity    Int
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([productId, warehouseId])
}

model Warehouse {
  id                 String      @id @default(cuid())
  name               String
  location           String
  shopifyLocationGid String?     @unique
  shopId             String
  shop               Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  inventories        Inventory[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@unique([shopId, name])
}

model DemandForecast {
  id              String   @id @default(cuid())
  productId       String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  predictedDemand Float
  periodDays      Int
  confidenceScore Float
  createdAt       DateTime @default(now())

  @@index([productId])
}

model NotificationLog {
  id           String   @id @default(cuid())
  shopId       String
  shop         Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  channel      String
  recipient    String?
  message      String
  status       String
  productId    String?
  productTitle String?
  alertType    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([shopId])
}
