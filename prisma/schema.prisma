generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id          String    @id @default(cuid())
  shopId      String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      BigInt?
  Shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

model Shop {
  id                         String               @id @default(cuid())
  shop                       String               @unique
  emailForNotifications      String?
  slackWebhookUrl            String?
  telegramBotToken           String?
  telegramChatId             String?
  whatsAppApiCredentialsJson String?
  lowStockThreshold          Int?                 @default(10)
  initialSyncCompleted       Boolean              @default(false)
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  notificationLogs           NotificationLog[]
  NotificationSettings       NotificationSetting?
  products                   Product[]
  Session                    Session[]
  warehouses                 Warehouse[]
}

model NotificationSetting {
  id                          String   @id @default(cuid())
  shopId                      String   @unique
  email                       Boolean  @default(false)
  slack                       Boolean  @default(false)
  telegram                    Boolean  @default(false)
  mobilePush                  Boolean  @default(false)
  emailAddress                String?
  slackWebhookUrl             String?
  telegramBotToken            String?
  telegramChatId              String?
  frequency                   String   @default("daily")
  lowStockThreshold           Int?
  salesVelocityThreshold      Float?
  criticalStockThresholdUnits Int?
  criticalStockoutDays        Int?
  syncEnabled                 Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  shop                        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Product {
  id                 String           @id @default(cuid())
  shopifyId          String           @unique
  title              String
  vendor             String
  productType        String?
  status             ProductStatus?   @default(Unknown)
  trending           Boolean?         @default(false)
  salesVelocityFloat Float?
  stockoutDays       Float?
  lastRestockedDate  DateTime?
  category           String?
  tags               String[]
  quantity           Int?             @default(0)
  handle             String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  shopId             String
  DemandForecasts    DemandForecast[]
  inventory          Inventory[]
  shop               Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  variants           Variant[]
  analyticsData      AnalyticsData[]
  productAlerts      ProductAlert[]

  @@index([shopId])
}

model Variant {
  id                String   @id @default(cuid())
  shopifyId         String   @unique
  title             String?
  sku               String?
  price             Decimal?
  inventoryQuantity Int?
  inventoryItemId   String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  productId         String
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sku])
  @@index([productId])
}

model Inventory {
  id                String    @id @default(cuid())
  quantity          Int
  availableQuantity Int?
  warehouseId       String
  productId         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse         Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([productId, warehouseId])
}

model Warehouse {
  id                 String      @id @default(cuid())
  name               String
  location           String
  shopifyLocationGid String?     @unique
  shopId             String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  inventories        Inventory[]
  shop               Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, name])
}

model DemandForecast {
  id              String   @id @default(cuid())
  productId       String
  predictedDemand Float
  periodDays      Int
  confidenceScore Float
  createdAt       DateTime @default(now())
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model AnalyticsData {
  id          String   @id @default(cuid())
  productId   String
  date        DateTime
  unitsSold   Int?
  revenue     Float?
  orders      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([date])
}

model ProductAlert {
  id          String   @id @default(cuid())
  productId   String
  alertType   String
  message     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isActive])
}

model NotificationLog {
  id           String              @id @default(cuid())
  shopId       String
  channel      NotificationChannel
  recipient    String?
  message      String
  subject      String?
  errorMessage String?
  status       NotificationStatus
  productId    String?
  productTitle String?
  alertType    String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  shop         Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

enum ProductStatus {
  Unknown
  OK
  Low
  Critical
  OutOfStock
}

enum NotificationChannel {
  Email
  Slack
  Telegram
  MobilePush
  System
  SMS
  Webhook
}

enum NotificationStatus {
  Sent
  Delivered
  Failed
  Error
  Simulated
  FailedConfiguration
  Pending
}
