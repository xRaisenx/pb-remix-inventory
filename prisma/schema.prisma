// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id          String    @id
  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      BigInt?

  @@index([shop])
}

model Shop {
  id                          String                  @id
  shop                        String                  @unique
  accessToken                 String // User schema still has this as non-optional
  emailForNotifications       String?
  slackWebhookUrl             String?
  telegramBotToken            String?
  telegramChatId              String?
  whatsAppApiCredentialsJson  String?
  lowStockThreshold           Int?
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  products                    Product[]
  NotificationSettings        NotificationSetting[]
}

model NotificationSetting {
  id        String   @id @default(cuid())
  channel   String   // e.g., 'email', 'slack'
  enabled   Boolean
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([shopId, channel])
}

model Product {
  id                 String     @id @default(cuid())
  shopifyId          String     @unique
  title              String
  vendor             String
  productType        String?
  status             String     @default("active") // Added status
  trending           Boolean    @default(false)   // Added trending
  salesVelocityFloat Float?                       // Added sales velocity
  stockoutDays       Int?                         // Added stockout days
  lastRestockedDate  DateTime?                    // Added last restocked date
  category           String?                      // Added category
  tags               String[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  shopId             String
  shop               Shop       @relation(fields: [shopId], references: [id])
  variants           Variant[]
  inventory          Inventory[]

  @@index([shopId])
}

model Variant {
  id                String      @id @default(cuid())
  shopifyId         String      @unique
  title             String
  sku               String?
  price             Decimal
  inventoryQuantity Int
  inventoryItemId   String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  productId         String
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sku])
  @@index([productId])
}

model Inventory {
  id         String   @id @default(cuid())
  quantity   Int
  warehouse  Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([productId])
}

model Warehouse {
  id        String      @id @default(cuid())
  name      String
  inventories Inventory[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
