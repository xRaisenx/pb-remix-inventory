name: 🚀 Build and Test with Auto-Fix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Pre-flight checks
  preflight:
    name: 🔍 Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: 🗄️ Setup database
      run: |
        npm run db:setup
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🔍 Environment validation
      run: |
        echo "Checking environment variables..."
        if [ -z "${{ secrets.DATABASE_URL }}" ]; then
          echo "❌ DATABASE_URL is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SHOPIFY_API_KEY }}" ]; then
          echo "❌ SHOPIFY_API_KEY is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SHOPIFY_API_SECRET }}" ]; then
          echo "❌ SHOPIFY_API_SECRET is not set"
          exit 1
        fi
        echo "✅ Environment variables validated"
        
    - name: 🗄️ Database connection test
      run: |
        npm run db:test
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 📋 Pre-flight summary
      run: |
        echo "✅ Pre-flight checks completed successfully"
        echo "📊 Node.js version: $(node --version)"
        echo "📊 npm version: $(npm --version)"
        echo "📊 Database: Connected"

  # Job 2: Linting and Type Checking
  lint-and-type-check:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    needs: preflight
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: 🔍 Run linting
      run: |
        npm run lint
        
    - name: 📝 TypeScript type checking
      run: |
        npm run type-check
        
    - name: 📊 Lint results summary
      run: |
        echo "✅ Linting completed"
        echo "✅ Type checking completed"

  # Job 3: Comprehensive testing
  test:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: preflight
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: 🗄️ Setup database
      run: |
        npm run db:setup
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🔧 Fix database schema
      run: |
        npm run db:fix
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🧪 Run comprehensive tests
      run: |
        npm run test:comprehensive
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
        SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
        SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: 🧪 Run functional tests
      run: |
        npm run test:functional
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
        SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
        SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: 📊 Test results summary
      if: always()
      run: |
        echo "📋 Test execution completed"
        echo "📊 Check the logs above for detailed results"
        
    - name: 💾 Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.run_id }}
        path: |
          build-report-*.json
          test-results-*.json
          *.json
        retention-days: 7

  # Job 4: Build with testing
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [preflight, lint-and-type-check]
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: 🗄️ Setup database
      run: |
        npm run db:setup
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🔧 Fix database schema
      run: |
        npm run db:fix
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🏗️ Build with comprehensive testing
      run: |
        npm run build:with-testing
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
        SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
        SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: 🏗️ Remix build
      run: |
        npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
        SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
        SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
        
    - name: 📊 Build results summary
      if: always()
      run: |
        echo "📋 Build completed"
        if [ -d "build" ]; then
          echo "✅ Build directory created"
          ls -la build/
        fi
        if [ -f "build-report-*.json" ]; then
          echo "📋 Build report found"
        fi
        
    - name: 💾 Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_id }}
        path: |
          build/
          build-report-*.json
        retention-days: 30

  # Job 5: Security audit
  security:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    needs: preflight
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: �️ Security audit
      run: |
        npm audit --audit-level=moderate || echo "⚠️ Security audit found moderate issues"
        
    - name: 🔧 Security enhancements
      run: |
        npm run enhance:security
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: � Security summary
      run: |
        echo "✅ Security audit completed"
        echo "✅ Security enhancements applied"

  # Job 6: Performance optimization
  performance:
    name: ⚡ Performance Optimization
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: �️ Setup database
      run: |
        npm run db:setup
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: ⚡ Performance optimization
      run: |
        npm run optimize:performance
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: � Performance summary
      run: |
        echo "⚡ Performance optimization completed"
        if [ -f "performance-optimization-report.json" ]; then
          echo "📋 Performance report generated"
        fi

  # Job 7: Deployment (conditional)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build, security, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: 🏗️ Build for deployment (using vercel-build)
      run: |
        npm run vercel-build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
        SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
        SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        SCOPES: ${{ secrets.SCOPES }}
        
    - name: 🚀 Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        
    - name: 📊 Deployment summary
      run: |
        echo "🚀 Deployment completed successfully"
        echo "🌐 App URL: ${{ secrets.SHOPIFY_APP_URL }}"
        echo "📊 Build artifacts uploaded to Vercel"

  # Job 8: Post-deployment validation
  post-deployment:
    name: ✅ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: 🗄️ Setup database
      run: |
        npm run db:setup
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🧪 Post-deployment health check
      run: |
        echo "🧪 Running post-deployment health check..."
        npm run health-check
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🧪 Installation flow test
      run: |
        echo "🧪 Testing installation flow..."
        npm run test:installation
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
        SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
        SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
        
    - name: 📊 Final validation summary
      run: |
        echo "✅ Post-deployment validation completed"
        echo "🎉 All systems operational"
        echo "📊 App is ready for production use"

  # Job 9: Notification
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [post-deployment, preflight, lint-and-type-check, test, build, security, performance]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: 📊 Workflow summary
      run: |
        echo "📋 Workflow Summary for ${{ github.sha }}:"
        echo "✅ Pre-flight checks: ${{ needs.preflight.result }}"
        echo "✅ Lint & Type Check: ${{ needs.lint-and-type-check.result }}"
        echo "✅ Testing: ${{ needs.test.result }}"
        echo "✅ Build: ${{ needs.build.result }}"
        echo "✅ Security: ${{ needs.security.result }}"
        echo "✅ Performance: ${{ needs.performance.result }}"
        echo "✅ Deployment: ${{ needs.deploy.result }}"
        echo "✅ Post-deployment: ${{ needs.post-deployment.result }}"
        
    - name: 📢 Success notification
      if: needs.post-deployment.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        echo "🌐 App URL: ${{ secrets.SHOPIFY_APP_URL }}"
        echo "📊 All tests passed"
        echo "🛡️ Security checks passed"
        echo "⚡ Performance optimizations applied"
        
    - name: 📢 Failure notification
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ Workflow failed!"
        echo "🔍 Check the logs for details"
        echo "🔄 Manual intervention may be required"
        echo "📋 Failed jobs: $(echo '${{ toJson(needs) }}' | jq -r 'to_entries[] | select(.value.result == "failure") | .key' | tr '\n' ' ')" 